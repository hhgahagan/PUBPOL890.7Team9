
#4.6.1
flights |> 
  filter(dest == "IAH") |>
  group_by(year, month, day)|>
  summarize(
    n = n(),
    delay = mean(arr_delay, na.rm = TRUE)
    ) |>
  filter(n > 10)

flights |> 
  filter(carrier == "UA",
         dest %in% c("IAH", "HOU"), 
         sched_dep_time > 0900,
         sched_arr_time < 2000) |>
  group_by(flight) |>
  summarize (
    delay  =mean(arr_delay,na.rm=TRUE),
    cancelled = sum(is.na(arr_delay)), n = n()
    ) |> 
  filter(n>10)

#5.2.1 
#Each table represents observations in countries. 
#In table 1, country indicates the name of the country, year- presents the year, when the data have been collected, cases- the number of people with disease that year, population is the number of people in each country that year.  
#In table 2, country presents the countries included in the table, year is the year, when the observations have been done, type is the separate case and population, the count is the number of cases and population in a particular year. 
#In table 3, coountry and year are the same as in the above mentioned 2 tables, rate is the number of cases with disease and total population (case divided by population).


#5.2.2

table2 |>
  pivot_wider(names_from = type,
              values_from = count) |>
  mutate(rate = cases / population * 10000)

table3 <- table3 %>%
  separate(rate, into = c("cases", "population"), sep = "/") %>%
  mutate(cases = as.numeric(cases),
         population = as.numeric(population),
         rate = (cases/population) * 100000)
print("table 3:")
  print(table3)



#7.2.4 (1-6)
library(tidyverse)
#1
#For reading a |, we would use read_delim() with delim = "1"

#2
#These two functions have everything else in commmon.

#3
#col_positions is important argument because it defines the beginning and end of columns.
#col_types is also important since it defines what type of entry the column is.

#4
#We would need to specify the quote argument
read_csv("x,y\n1,'a,b'", quote = "\'")

#5
read_csv("a,b\n1,2,3\n4,5,6")
#This one has two column headers but three values in each row, R forces them to be merged
read_csv("a,b,c\n1,2\n1,2,3,4")
#There are three coulmn headers and the first row is missing a value, this makes the last column 
#have N/A. Also the secord row merges the last two values.
read_csv("a,b\n\"1")
#No rows are in there.
read_csv("a,b\n1,2\na,b")
#The columns have a number and letter, so each column type is turned into a character
read_csv("a;b\n1;3")
#; is the deliminter but it isn't defined so it is read as one column of data

#6
annoying <- tibble(
  `1` = 1:10,
  `2` = `1` * 2 + rnorm(length(`1`))
)
#Extracting the variable called 1.
annoying |>
  select(`1`)
#Plotting a scatterplot of 1 vs. 2.
ggplot(annoying, aes(x = `2`, y = `1`)) +
  geom_point()
#Creating a new column called 3, which is 2 divided by 1.
annoying |>
  mutate(`3` = `2` / `1`)
#Renaming the columns to one, two, and three.
annoying |>
  mutate(`3` = `2` / `1`) |>
  rename(
    "one" = `1`,
    "two" = `2`,
    "three" = `3`)

#Exercise 20.2.9

#1
survey <- read_excel(
  "C:/Users/Leslie Morales/Box/PUB POL Spring 2024/PUB POL 890 - R/survey.xlsx",
  col_type = c("text", "text"),
  na="N/A"
)

survey

survey <- survey |>
  mutate(
    n_pets = if_else(n_pets=="two", "2", n_pets),
    n_pets = parse_number(n_pets),
    survey_id = factor(survey_id)
    )

survey

#2 (Don't know functions to fill in NAs)
roster <- read_excel(
  "C:/Users/Leslie Morales/Box/PUB POL Spring 2024/PUB POL 890 - R/roster.xlsx",
  col_types = c("numeric", "text", "numeric")
)

roster                  

#3
#A
sales <- read_excel(
  "C:/Users/Leslie Morales/Box/PUB POL Spring 2024/PUB POL 890 - R/sales.xlsx",
  col_types = c("text", "text"),
  range = "A5:B13",
  col_names = c("id", "n")
)

sales

#B 
sales_tidy <- read_excel(
  "C:/Users/Leslie Morales/Box/PUB POL Spring 2024/PUB POL 890 - R/tidysales.xlsx",
  col_types = c("text", "numeric", "numeric"),
  range = "A5:C11",
  col_names = c("brand", "id","n")
)

sales_tidy

#4
install.packages("openxlsx")
library(openxlsx)

bake_sale <- tibble(
  item = factor(c("brownie", "cupcake", "cookie")),
  quantity = c(10, 5, 8)
)

write_xlsx(bake_sale, path = "C:/Users/Leslie Morales/Box/PUB POL Spring 2024/PUB POL 890 - R/bake-sale.xlsx")

#5
install.packages("janitor")
library(janitor)

students_snake <- read_xlsx(
  "C:/Users/Leslie Morales/Box/PUB POL Spring 2024/PUB POL 890 - R/students.xlsx",
  na = c("", "N/A"),
  col_types = c("numeric", "text", "text", "text", "text")
)

students_snake

students_snake <- students_snake |> 
  janitor::clean_names()

students_snake

students_snake <- students_snake |>
  mutate(
    age = if_else(age=="five", "5", age),
    age = parse_number(age)
  )

students_snake

#6
read_xls("C:/Users/Leslie Morales/Box/PUB POL Spring 2024/PUB POL 890 - R/survey.xlsx")

#If you try to open an .xlsx file with the read_xls function,
#you will get an error message saying R cannot open the file.



#Exercise 21.5.10

#1
distinct() is translated to DISTINCT in SQL
head() is translated to LIMIT clause of the SQL query

#2
#2.1 SELECT * 
     FROM flights
     WHERE dep_delay < arr_delay

# The above SQL query is translated as follows:
SELECT *: This selects all columns from the flights table.
FROM flights: This specifies the table named flights from which to retrieve the data.
WHERE dep_delay < arr_delay: This condition filters the rows where the departure delay (dep_delay) is less than the arrival delay (arr_delay).

# The equivalent dplyr code is:
flights |> filter(dep_delay < arr_delay)

#2.2 SELECT *, distance / (air_time / 60) AS speed
     FROM flights

# The above SQL query is translated as:
SELECT *: This selects all columns from the flights table.
distance / (air_time / 60) AS speed: This part calculates the speed of each flight. 
It divides the distance traveled (distance) by the air time (air_time), which is in minutes. 
The result is given a new variable with the 'aliasing' clause as the speed in miles per hour.

# The equivalent dplyr code will be:
flights |> mutate(speed = distance / (air_time / 60))


#Exercise 22.5.3

#1


#2


#3
