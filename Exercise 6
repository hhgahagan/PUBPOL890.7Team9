#10.3.3

#1

library(tidyverse)
View(diamonds)

ggplot(diamonds, aes(x=x)) + geom_histogram(binwidth = 0.5)
ggplot(diamonds, aes(x=x)) + geom_histogram(binwidth = 0.5) + coord_cartesian(xlim = c(3.5,10))
#For variable x, the values range from over 3.5 to almost 10
#This might represent a diamond's width.

ggplot(diamonds, aes(x=y)) + geom_histogram(binwidth = 0.5)
ggplot(diamonds, aes(x=y)) + geom_histogram(binwidth = 0.5) + coord_cartesian(xlim = c(3,10))
#For variable y, the values also range from over 3.5 to 10
#This might represent a diamond's depth.

ggplot(diamonds, aes(x=z)) + geom_histogram(binwidth = 0.5)
ggplot(diamonds, aes(x=z)) + geom_histogram(binwidth = 0.5) + coord_cartesian(xlim = c(0,7.5))
#For variable z, there are more observations with values of 0, but these values range from just under 2.5 to just above 6.
#This might represent a diamond's length.

#2

ggplot(diamonds, aes(x=price)) + geom_histogram(binwidth = 100)
ggplot(diamonds, aes(x=price)) + geom_histogram(binwidth = 1000)
ggplot(diamonds, aes(x=price)) + geom_histogram(binwidth = 5000)
#The distribution of price is right-skewed. Most of the observations are clustered in the $0 to $5000 range. 
#The price range with the most values is $1000 to $2000. Some of the highest values lie in the $15000 to $20000 range, which skews the data to the right.

#3

smalldiamonds <- diamonds |>
  filter(carat==0.99)
#About 23 diamonds are 0.99 carat.

onecarat <- diamonds |>
  filter(carat==1)
#About 1558 diamonds are 1 carat.
#There are more 1 carat diamonds because diamonds are more likely to be sold as whole carat rather than as partial carat.

#4

ggplot(diamonds, aes(x=price)) +
  geom_histogram() +
  coord_cartesian(ylim = c(0,50))
#Using this argument only shows data that has up to 50 observations within a range.
#You cannot tell if a value range has more than 50 observations.
#The binwidths are set automatically.
#Without setting the binwidth, the histogram for prices looks like two blocks and you can't tell when a range starts or ends.

ggplot(diamonds, aes(x=price)) +
  geom_histogram() +
  coord_cartesian(xlim = c(0,10000))
#Using this argument only shows a certain value range of the x-axis variable. No observations beyond this range are observed.
#The binwidths are set automatically and it is easier to distinguish the range of values and how many observations fall within each range.

ggplot(diamonds, aes(x=price)) +
  geom_histogram() +
  coord_cartesian(ylim = c(0,1000))
#If you try to zoom so only half a bar shows, the bars combine and it is hard to distinguish between them.


#10.4.1

#1 In the histogram the command excludes the missing values and at the end it adds the # of removed missing data points. This means that missing values do not contribute to the histogram's bin counts or its graphical representation. On the other hand, in the bar chart, they are presented separate category. The difference is the histogram excludes the missing values, since it needs numerical values to include in the bins and the bar-chart makes a separate category.  
#2 This function decides how the missing values are handled during the calculations. It ignores all the missing values before the calculation of mean and sum.
#3 
nycflights13::flights |> 
  mutate(
    cancelled = is.na(dep_time),
    sched_hour = sched_dep_time %/% 100,
    sched_min = sched_dep_time %% 100,
    sched_dep_time = sched_hour + (sched_min / 60)
  ) %>%
  ggplot(aes(x = sched_dep_time)) +
  geom_freqpoly(aes(color = cancelled), binwidth = 1/4) +
  facet_wrap(~cancelled, scales = "free_y") +
  labs(
    title = "Frequency of Scheduled Departure Times",
    x = "Scheduled Departure Time (Hours)",
    y = "Number of Flights"
  ) +
  scale_color_manual(values = c("TRUE" = "red", "FALSE" = "blue"),
                     labels = c("TRUE" = "Cancelled", "FALSE" = "Not Cancelled")) +
  theme_minimal()


#11.2.1

#1 
ggplot(data = mpg, mapping = aes(x = fct_reorder(class, hwy), y = hwy, fill = class)) +
  geom_boxplot() +
  coord_flip() +
  scale_fill_manual(values = c("compact" = "#1b9e77", "midsize" = "#d95f02", "suv" = "#7570b3", 
                               "2seater" = "#e7298a", "minivan" = "#66a61e", "pickup" = "#e6ab02", 
                               "subcompact" = "#a6761d")) + # Adjust these colors and classes as needed
  labs(
    title = "Engine Displacement vs. Highway Mileage",
    subtitle = "Comparing the median highway mpg in each class",
    caption = "Data from fueleconomy.gov",
    x = "Car Class",
    y = "Highway Miles per Gallon"
  ) +
  theme_minimal()

#2 
ggplot(mpg, aes(x = cty, y = hwy, color = drv, shape = drv)) +
  geom_point() +
  scale_color_manual(values = c("4" = "red", "f" = "green", "r" = "blue")) +
  scale_shape_manual(values = c("4" = 16, "f" = 17, "r" = 15)) +
  theme_minimal() +
  labs(
    title = "Highway vs. City Fuel Efficiency",
    subtitle = "Colored and Shaped by Type of Drive Train",
    x = "City MPG",
    y = "Highway MPG",
    color = "Type of Drive Train",
    shape = "Type of Drive Train"
  ) +
  theme(legend.position = "right")
#3 
ggplot(
  data = penguins,
  mapping = aes(x = flipper_length_mm, y = body_mass_g, color = species)
) +
  geom_point() +
  labs(
    title = "Comparative Analysis of Body Mass and Flipper Length Across Penguin Species",
    subtitle = "Scatter Plot Showing Correlation Between Body Mass and Flipper Length",
    caption = "Data collected from the Palmer Archipelago, Antarctica. Each point represents an individual penguin measurement.",
    x = "Flipper Length (mm)",
    y = "Body Mass (g)",
    color = "Species"
  ) +
  theme_minimal()


#11.3.1

#1.
label <- tribble(
  ~displ, ~hwy, ~label, ~vjust, ~hjust,
  Inf, Inf, "Top right", "top", "right",
  Inf, -Inf, "Bottom right", "bottom", "right",
  -Inf, Inf, "Top left", "top", "left",
  -Inf, -Inf, "Bottom left", "bottom", "left"
)

ggplot(mpg, aes(displ, hwy)) +
  geom_point() +
  geom_text(aes(label = label, vjust = vjust, hjust = hjust), data = label)

#2.
ggplot(mpg, aes(displ, hwy)) +
  geom_point() +
  annotate("text",
    x = Inf, y = Inf,
    label = "There is a potential correlation between engine size and decreasing fuel economy.", vjust = "top", hjust = "right", color = "blue", size = 5
  )

#3. If the facet variable is not specified, then the text is just drawn in all facets. 
#To draw the label in only one facet, you need to add a column to the label data frame with the value of the variable(s) facetting.
#To put a different label in each facet, you would need to include a variable in your dataset that corresponds to the labels you want to display. Then, you can use that variable in the aes() function within geom_text(). 

#4.
#label.padding is the padding around label
#label.r is the amount of rounding in the corners
#label.size is the size of label border

#5. 
#The four arguments are (from the help for arrow()):
#angle decides the angle of arrow head
#length is for the length of the arrow head
#ends ends the line and then draw arrow head
#type: "open" or "close" commands whether the arrow head is a closed or open triangle

#11.4.6

#1
In the code provided, the geom_hex() function creates a hexbin plot. However, the scale_color_gradient() function adjusts 
the color scale of a continuous color aesthetic.

In the present case, the geom_hex() function uses the fill aesthetic to represent the density of points in each hexagonal bin,
but we’re trying to adjust the color scale using scale_color_gradient(). 
So, to adjust the color scale of the hex-bin plot, we should use the scale_fill_gradient() function. Here is the corrected code

df <- tibble(   
  x = rnorm(10000),   
  y = rnorm(10000) 
  )  

ggplot(df, aes(x, y)) +   
  geom_hex() +   
  scale_fill_gradient(low = "white", 
                      high = "red") +   
  coord_fixed()

#2
The first argument to every scale function is name . It is used as the axis or legend title.
The labs() can also be used to name a legend, with the aesthetic name defining the new name. For example, labs(x = NULL). 
The output will be the same.

We use scale_ functions to customize how a specific aesthetic is represented in the plot. 
It allows us to modify the scale, transformation, and appearance of the aesthetic. 
On the other hand, labs()is specifically designed for modifying the text labels and titles of different plot components.
It’s not concerned with how an aesthetic is represented or scaled in the plot.

#3

data("presidential")

# Creating a vector of years where a new president takes office
# to allow plotting it on the x-axis
x_labs = 
  presidential |>
  select(start) |>
  as_vector() |>
  as_date()

y_labs = seq(
  from = 1 + 33,
  to = nrow(presidential) + 33,
  by = 1
)

g = 
presidential |>
  as_tibble() |>
  mutate(id = 33 + row_number()) |>
  ggplot(aes(x = start, xend = end, 
             y = id, yend = id, 
             col = party,
             label = name)) +
  geom_segment(lwd = 10) +
  
  # (a) Combining the two variants that customize colors and x axis breaks.
  scale_color_manual(values = c("Democratic" = "blue",
                                "Republican" = "red")) +
  scale_x_continuous(breaks = x_labs,
                     labels = year(x_labs)) +
  
  
  # (b) Improving the display of the y axis.
    scale_y_reverse(breaks = y_labs,
                  labels = y_labs) +
  
  
  # (c) Labeling each term with the name of the president.
  geom_text(hjust = -0.05,
            vjust = -1.5) +
  
  geom_rect(aes(xmin = start,
                xmax = end,
                ymin = 33.5,
                ymax = 45.5,
                fill = party),
            alpha = 0.3,
            col = NA) +
  scale_fill_manual(values = c("Democratic" = "blue",
                                "Republican" = "red")) +
  
  
  # (d) Adding informative plot labels.
  labs(color = "President's Political Party",
       y = "Table of Precedence Number", 
       x = "Year") +
  theme_minimal() +
  theme(legend.position = "bottom") +
  theme(panel.grid.major.x = element_line(color = "darkgrey"),
        panel.grid.minor.x = element_blank(),
        panel.grid.major.y = element_blank(),
        panel.grid.minor.y = element_blank(),
        axis.text.y = element_text()) +
  guides(fill = "none")

print(g) 

# (e) Placing breaks every 4 years 

x_4yr_labs = 
  presidential |>
  select(start) |>
  as_vector() |>
  as_date()
  
x_4yr_labs = seq(from = ymd(x_4yr_labs[1]),
                 to = ymd(x_4yr_labs[length(x_4yr_labs)]),
                 by = "4 years")

g + 
  scale_x_continuous(breaks = x_4yr_labs,
                     labels = year(x_4yr_labs))


#4

ggplot(diamonds, aes(x = carat, y = price)) +   
  geom_point(aes(color = cut), alpha = 1/20) +
  theme_light() +
  guides(color = guide_legend(override.aes = list(size = 5,
                                                  alpha = 0.5)))




