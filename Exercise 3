
#3.2.5

library(nycflights13)
library(tidyverse)
view(flights)

#1
  filter(flights,arr_delay>=120)
  filter(flights, month>=7,month<=9)
  filter(flights,dest=="IAH"|dest=="HOU")
  filter(flights,carrier=="UA"|carrier=="AA"|carrier=="DL")
  filter(flights,arr_delay>120 & dep_delay<=0)
  filter(flights,dep_delay>=60,dep_delay - arr_delay > 30)      
#2
flights |>
  arrange(desc(dep_delay))
#The most delayed flight was HA 51, JFK to HNL.
arrange(flights, dep_delay)
#The least delayed flight was B697, from JFK to Den.
#
#3
head(arrange(flights, air_time))
#with math
head(arrange(flights, desc(distance/air_time)))
#4
flights|>
  distinct(year,day,month)
#
#Yes, there were are 365 distinct rows meaning there were flights everyday.
#5
flights |>
  arrange(desc(distance)) |>
  relocate(distance)

flights |>
  arrange(distance) |>
  relocate(distance)
#4983 miles for longest and 80 miles for shortest
#6 It does not matter what order because it is filtering based on the conditions


#3.3.5

#1
flights |> select(dep_time, sched_dep_time, dep_delay)

#These columns are related in that sched_dep_time + dep_delay = dep_time

#2
flights |> select(dep_time, dep_delay, arr_time, arr_delay)
flights |> select(dep_time:arr_delay & !sched_dep_time & !sched_arr_time)
flights |> select(dep_time:arr_delay & !starts_with("sched"))
flights |> select(starts_with("dep") | starts_with("arr"))

#3
flights |> select(month)
flights |> select(month, month, month)

#If you specify the name of the same variable multiple times, it brings up the specified variable only once.

#4
?any_of

#The any_of function selects variables contained in a character vector.

variables <- c("year", "month", "day", "dep_delay", "arr_delay")
flights |> select(any_of(variables))

#The any_of function can help with this vector because it selects all variables contained in it, which can help shorthand codes involving these variables

#5
flights |> select(contains("TIME"))

#Considering the fact that R can be case sensitive, the result of this code was surprising. 
#The select helpers will select any variable containing the specified characters no matter their case.

flights |> select(contains("time"))

#6
flights |> rename(air_time_min=air_time) |> relocate(air_time_min)

#7
flights |> select(tailnum) |> arrange(arr_delay)

#The following code does not work because the select function selects only the tailnum column. That is why R says that the arr_delay object was not found.
#R can't arrange the values in tailnum by their arrival delay unless the arr_delay column is also chosen, which is shown in the corrected code below.

flights |> select(tailnum, arr_delay) |> arrange(arr_delay)

#3.5.7
#1 
flights |> 
  group_by(carrier, dest) |> 
  summarise(avg_dep_delay = mean(dep_delay, na.rm = TRUE)) |>
  arrange(desc(avg_dep_delay))

worst_delays <- flights |>
  group_by(carrier, dest) |>
  summarize(
    total_flights = n(),
    avg_delay = mean(dep_delay, na.rm = TRUE)
  ) |>
  arrange(desc(avg_delay))

#United is the most delayed one

#2
flights |>
  group_by(dest) |>
  arrange(dest, desc(dep_delay)) |>
  slice_head(n = 5) |>
  relocate(dest, dep_delay)
#albuquerque is the one

#3
flights |>
  group_by(hour) |>
  summarise(avg_dep_delay = mean(dep_delay, na.rm = TRUE)) |>
  ggplot(aes(x = hour, y = avg_dep_delay)) + geom_smooth()

#based on the graph we observe that the pick of delays is from 5:00 p.m. -7:00 p.m. and after 8:00 p.m. it decreases.

#4
flights |> 
  slice_min(dep_delay, n = -5) |>
  relocate(dep_delay)

flights |>
  slice_min(dep_delay, n = - 5) |>
  relocate(dep_delay)

flights |> 
  slice_max(dep_delay, n = -5) |>
  relocate(dep_delay)

flights |> 
  slice_max(dep_delay, n = 5) |>
  relocate(dep_delay)
#no tangible change happens. it arranges the data frame in increasing or decreasing order, but it does not slice the data frame.

#5
#group_by() is dividing the data set into meaningful groups based on one or more variables. 
#summarize() is used to calculate a single summary statistic, counting the number of observations within each group.
#while putting sort argument to True, it groups the categories in descending order.

#6
df <- tibble(
  x = 1:5,
  y = c("a", "b", "a", "a", "b"),
  z = c("K", "K", "L", "L", "K")
)
#the first function defines the data frame "df"
df |>
  group_by(y)
#(a)this command defines "df" by "y"

df |>
  arrange(y)
#(b)it arranges "df" in ascending order in terms of "y"

df |>
  group_by(y) |>
  summarize(mean_x = mean(x))
#(c)groups "df" by "y", and then calculates the mean of x for each group. 

df |>
  group_by(y, z) |>
  summarize(mean_x = mean(x))
#(d) it groups the "df" by "x" and "y" and calculates the average of "x" for each group. The output is grouped by "y".

df |>
  group_by(y, z) |>
  summarize(mean_x = mean(x), .groups = "drop")
#(e) it groups the "df" by "x" and "y", then it calculates the average of "x". The difference from the 1 code is that in this code, the first part of the code retains the grouping information and the second part drops. 

df |>
  group_by(y, z) |>
  summarize(mean_x = mean(x))

df |>
  group_by(y, z) |>
  mutate(mean_x = mean(x))
#(f) The difference is that the second one with mutate the function adds a new column (mean_x) to every row in the original data set, showing the average of "x" for the group to which that row belongs.

#4.6.1
flights |> 
  filter(dest == "IAH") |>
  group_by(year, month, day)|>
  summarize(
    n = n(),
    delay = mean(arr_delay, na.rm = TRUE)
    ) |>
  filter(n > 10)

flights |> 
  filter(carrier == "UA",
         dest %in% c("IAH", "HOU"), 
         sched_dep_time > 0900,
         sched_arr_time < 2000) |>
  group_by(flight) |>
  summarize (
    delay  =mean(arr_delay,na.rm=TRUE),
    cancelled = sum(is.na(arr_delay)), n = n()
    ) |> 
  filter(n>10)

#5.2.1 
#Each table represents observations in countries. 
#In table 1, country indicates the name of the country, year- presents the year, when the data have been collected, cases- the number of people with disease that year, population is the number of people in each country that year.  
#In table 2, country presents the countries included in the table, year is the year, when the observations have been done, type is the separate case and population, the count is the number of cases and population in a particular year. 
#In table 3, coountry and year are the same as in the above mentioned 2 tables, rate is the number of cases with disease and total population (case divided by population).


#5.2.2

table2 |>
  pivot_wider(names_from = type,
              values_from = count) |>
  mutate(rate = cases / population * 10000)

table3 <- table3 %>%
  separate(rate, into = c("cases", "population"), sep = "/") %>%
  mutate(cases = as.numeric(cases),
         population = as.numeric(population),
         rate = (cases/population) * 100000)
print("table 3:")
  print(table3)




