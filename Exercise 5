library(ggplot2)

#Exercise 9.2.1
#1. Create a scatterplot of hwy vs. displ where the points are pink filled in triangles.

ggplot(mpg, aes(x = hwy, y = displ)) +
+     geom_point(color = "pink", shape = "triangle")

#2. Why did the following code not result in a plot with blue points?
ggplot(mpg) + 
  geom_point(aes(x = displ, y = hwy, color = "blue"))

Answer: Because the aesthetic argument is written outside the ggplot function.
Color should be set outside of the aesthetic mapping, the correct argument would be:

ggplot(mpg, aes(x = displ, y = hwy)) +
  geom_point(color = "blue")

#3. What does the stroke aesthetic do? What shapes does it work with? (Hint: use ?geom_point)

Answer: Stroke controls the size of the edge/border of the points for shapes 21-24 
(filled circle, square, triangle, and diamond).

#4. What happens if you map an aesthetic to something other than a variable name, 
like aes(color = displ < 5)? Note, you’ll also need to specify x and y.

Answer: Mapping aesthetic to somthing other than a varibale like the following:

ggplot(mpg, aes(x = hwy, y = displ, color = displ < 5)) + 
  geom_point()

Creates a logical variable with values TRUE and FALSE for cars 
with displacement values below and above 5.In general, mapping
an aesthetic to something other than a variable first evaluates
that expression then maps the aesthetic to the outcome.

#Exercise 9.3.1
#1. What geom would you use to draw a line chart? A boxplot? A histogram? An area chart?
#line chart: geom_line()
#boxplot: geom_boxplot()
#histogram: geom_histogram()
#area chart: geom_area()

#2. Earlier in this chapter we used show.legend without explaining it:
  
ggplot(mpg, aes(x = displ, y = hwy)) +
geom_smooth(aes(color = drv), show.legend = FALSE)

#What does show.legend = FALSE do here? What happens if you remove it? Why do you think we used it earlier?
  #This hides the legend box. If you remove it, a legend will display. We used it earlier becasue the legend was not necessary since we were not looking at it by color.

#3. What does the se argument to geom_smooth() do?
#It adds the standard error bands around the lines.

#4. Recreate the R code necessary to generate the following graphs. Note that wherever a categorical variable is used in the plot, it’s drv.
#1
ggplot(mpg, aes(x = displ, y = hwy)) +
  geom_point() +
  geom_smooth(se = FALSE)
#2
ggplot(mpg, aes(x = displ, y = hwy)) +
  geom_smooth(mapping = aes(group = drv), se = FALSE) +
  geom_point()
#3
ggplot(mpg, aes(x = displ, y = hwy, colour = drv)) +
  geom_point() +
  geom_smooth(se = FALSE)
#4
ggplot(mpg, aes(x = displ, y = hwy)) +
  geom_point(aes(colour = drv)) +
  geom_smooth(se = FALSE)
#5
ggplot(mpg, aes(x = displ, y = hwy)) +
  geom_point(aes(colour = drv)) +
  geom_smooth(aes(linetype = drv), se = FALSE)
#6
ggplot(mpg, aes(x = displ, y = hwy)) +
  geom_point(size = 4, color = "white") +
  geom_point(aes(colour = drv))

#Exercise 9.4.1

#1
ggplot(mpg,aes(x=displ, y=hwy)) + geom_point() + facet_wrap(~cty)

#If you facet a continuous variable, R will separate each value into its own facet.

#2
ggplot(mpg, aes(x=displ, y=hwy)) + 
  geom_point() + 
  facet_grid(drv~cyl)

#The empty cells means that 
#1) no 4-wheel drive has 5 cylinders and
#2) no rear-wheel drive and has 4 or 5 cylinders.

ggplot(mpg) + 
  geom_point(aes(x = drv, y = cyl))

#The facets that were empty have no points representing their values in the scatterplot.

#3
ggplot(mpg) + 
  geom_point(aes(x = displ, y = hwy)) +
  facet_grid(drv ~ .)

#This code creates facet grids splitting the scatterplots of displ and hwy by drv values.

ggplot(mpg) + 
  geom_point(aes(x = displ, y = hwy)) +
  facet_grid(.~cyl)

#This code creates facet grids splitting the scatterplots of displ and hwy by cyl values.

#The . rotates the grids either displaying the differences between each category across rows or columns.

#4
ggplot(mpg) + 
  geom_point(aes(x = displ, y = hwy)) + 
  facet_wrap(~ class, nrow = 2)

#Pro: Using facets as opposed to colors allows you to visually separate the categories of a categorical variable in a "neater" way and clearly observe the relationship between x and y for one category.
#Con: With facets, you cannot see how the observations in each category compare to all values in the data.
#With a larger data set, you may want to use facets to see the relationship between displ and hwy more clearly. The color aesthetic may get messy and overlap points which will not allow you to see how two variables relate to one another.

#5
?facet_wrap

#nrow is the function that sets the number of rows of facets.
#ncol allows you to set the number of columns of facets.
#The scales, shrink, labeller, and switch functions control the layout of the individual panels.
#facet_grid does not have nrow and ncol arguments because all the facets are displayed in either the same row or same column so there is no need to specify how many rows and columns you need.

#6
ggplot(mpg, aes(x = displ)) + 
  geom_histogram() + 
  facet_grid(drv ~ .)

ggplot(mpg, aes(x = displ)) + 
  geom_histogram() +
  facet_grid(. ~ drv)

#The second code allows for better comparisons
#If you are comparing histograms, it is better to facet a variable across columns. The geom you choose will determine whether faceting across rows or columns is better for comparisons.

#7
ggplot(mpg) + 
  geom_point(aes(x = displ, y = hwy)) +
  facet_grid(drv ~ .)

ggplot(mpg) + 
  geom_point(aes(x = displ, y = hwy)) +
  facet_wrap(drv ~ .)

#The label names and positions stay the same, but the label values change. For facet_grid, the values repeat along the y-axis since the facets are across rows.
#For facet_wrap, the values repeat along the x-axis since the facets are across columns.

#Exercise 9.5.1
diamonds |>
  group_by(cut) |>
  summarize(
    lower = min(depth),
    upper = max(depth),
    midpoint = median(depth)
  ) |
  ggplot(aes(x = cut, y = midpoint)) +
  geom_pointrange(aes(ymin = lower, ymax = upper))

#Exercise 9.5.2
#geom_bar() calculates the heights from the data and then plots them in: representing the count of observations in each category.  geom_col() creates a bar plot where heights of the bars are representing a value associated with each category.

#Exercise 9.5.3
#geom_boxplot() & stat_boxplot()
#geom_smooth() & stat_smooth()
#geom_bar() & stat_count()
#geom_violin() & stat_ydensity()
#geom_density() & stat_density()
#geom_smooth() & stat_smooth()

#Exercise 9.5.4
#stat_smooth() computes a smoothed conditional mean and/or median
#computes the predicted value of x or y
#standard error

#Exercise 9.5.5
ggplot(diamonds, aes(x = cut, y = after_stat(prop), group = 1)) +
  geom_bar()
#while using this code with group = 1 we create proportion of chart bars correctly 

ggplot(diamonds, aes(x = cut, fill = color, y = after_stat(prop), group = color)) + 
  geom_bar()
# group = color ensures that each color within each cut category is grouped together: calculatiing and representing proportions for each color within each cut cagegory.
